/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type RecoveryInfoStruct = {
  oldAddress: PromiseOrValue<string>;
  transferDetails: ISignatureTransfer.SignatureTransferDetailsStruct[];
};

export type RecoveryInfoStructOutput = [
  string,
  ISignatureTransfer.SignatureTransferDetailsStructOutput[]
] & {
  oldAddress: string;
  transferDetails: ISignatureTransfer.SignatureTransferDetailsStructOutput[];
};

export type BackupWitnessStruct = {
  signers: PromiseOrValue<string>[];
  threshold: PromiseOrValue<BigNumberish>;
};

export type BackupWitnessStructOutput = [string[], BigNumber] & {
  signers: string[];
  threshold: BigNumber;
};

export declare namespace TokenBackups {
  export type PalStruct = {
    sig: PromiseOrValue<BytesLike>;
    addr: PromiseOrValue<string>;
    sigDeadline: PromiseOrValue<BigNumberish>;
  };

  export type PalStructOutput = [string, string, BigNumber] & {
    sig: string;
    addr: string;
    sigDeadline: BigNumber;
  };
}

export declare namespace ISignatureTransfer {
  export type TokenPermissionsStruct = {
    token: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type TokenPermissionsStructOutput = [string, BigNumber] & {
    token: string;
    amount: BigNumber;
  };

  export type PermitBatchTransferFromStruct = {
    permitted: ISignatureTransfer.TokenPermissionsStruct[];
    nonce: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
  };

  export type PermitBatchTransferFromStructOutput = [
    ISignatureTransfer.TokenPermissionsStructOutput[],
    BigNumber,
    BigNumber
  ] & {
    permitted: ISignatureTransfer.TokenPermissionsStructOutput[];
    nonce: BigNumber;
    deadline: BigNumber;
  };

  export type SignatureTransferDetailsStruct = {
    to: PromiseOrValue<string>;
    requestedAmount: PromiseOrValue<BigNumberish>;
  };

  export type SignatureTransferDetailsStructOutput = [string, BigNumber] & {
    to: string;
    requestedAmount: BigNumber;
  };
}

export interface TokenBackupsInterface extends utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "recover((bytes,address,uint256)[],bytes,((address,uint256)[],uint256,uint256),(address,(address,uint256)[]),(address[],uint256))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "DOMAIN_SEPARATOR" | "recover"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recover",
    values: [
      TokenBackups.PalStruct[],
      PromiseOrValue<BytesLike>,
      ISignatureTransfer.PermitBatchTransferFromStruct,
      RecoveryInfoStruct,
      BackupWitnessStruct
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "recover", data: BytesLike): Result;

  events: {};
}

export interface TokenBackups extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TokenBackupsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    recover(
      pals: TokenBackups.PalStruct[],
      backup: PromiseOrValue<BytesLike>,
      permitData: ISignatureTransfer.PermitBatchTransferFromStruct,
      recoveryInfo: RecoveryInfoStruct,
      witnessData: BackupWitnessStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  recover(
    pals: TokenBackups.PalStruct[],
    backup: PromiseOrValue<BytesLike>,
    permitData: ISignatureTransfer.PermitBatchTransferFromStruct,
    recoveryInfo: RecoveryInfoStruct,
    witnessData: BackupWitnessStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    recover(
      pals: TokenBackups.PalStruct[],
      backup: PromiseOrValue<BytesLike>,
      permitData: ISignatureTransfer.PermitBatchTransferFromStruct,
      recoveryInfo: RecoveryInfoStruct,
      witnessData: BackupWitnessStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    recover(
      pals: TokenBackups.PalStruct[],
      backup: PromiseOrValue<BytesLike>,
      permitData: ISignatureTransfer.PermitBatchTransferFromStruct,
      recoveryInfo: RecoveryInfoStruct,
      witnessData: BackupWitnessStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recover(
      pals: TokenBackups.PalStruct[],
      backup: PromiseOrValue<BytesLike>,
      permitData: ISignatureTransfer.PermitBatchTransferFromStruct,
      recoveryInfo: RecoveryInfoStruct,
      witnessData: BackupWitnessStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
